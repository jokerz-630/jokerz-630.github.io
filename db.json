{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/favicon.jpg","path":"favicon.jpg","modified":1,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":0},{"_id":"source/images/header.jpg","path":"images/header.jpg","modified":1,"renderable":0},{"_id":"source/images/image-20250211094135244.png","path":"images/image-20250211094135244.png","modified":1,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"1ebda60743b8c63a4ef7ffbbf530c5ab5bf8c628","modified":1739337575723},{"_id":"source/.DS_Store","hash":"34cb1c1c2eae17c8bc7ba144fac4a8fc6a408cee","modified":1739351735614},{"_id":"source/_posts/fast-springboot-demo.md","hash":"d10cfcf4dd0d2bb367e7c83ed7b52e08efb79f79","modified":1739350494027},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1739337710150},{"_id":"source/README.md","hash":"5f08f51e8f6706eee873233403d687ce6cbb91c4","modified":1739352018785},{"_id":"source/images/favicon.ico","hash":"1ebda60743b8c63a4ef7ffbbf530c5ab5bf8c628","modified":1739337719570},{"_id":"source/images/image-20250211094135244.png","hash":"5f9f85818c8b97075fb9e756207b8891c55cf818","modified":1739238095245},{"_id":"source/favicon.jpg","hash":"4f7f1160a56db2b22357b17a68ac913b2f949874","modified":1739350570418},{"_id":"source/images/header.jpg","hash":"4f7f1160a56db2b22357b17a68ac913b2f949874","modified":1739337942270},{"_id":"themes/butterfly/README.md","hash":"f099cbbd6bf34ee3e55b609a7b3960cd634263d0","modified":1739344030959},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1739344030959},{"_id":"themes/butterfly/_config.yml","hash":"bf33e84dd7b48524eb728f1f2e419cb10a2c32c2","modified":1739344030959},{"_id":"themes/butterfly/.DS_Store","hash":"865911d71db14677a2b0c919a5fb02ccb9302dfd","modified":1739351740622},{"_id":"themes/butterfly/README_CN.md","hash":"324c8d65fff0107561cdb325743538ea0e7150f3","modified":1739344030959},{"_id":"themes/butterfly/languages/en.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1739344030959},{"_id":"themes/butterfly/plugins.yml","hash":"952ae1fb19d366ef93e291692d36d2381f6cc398","modified":1739344030976},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1739344030958},{"_id":"themes/butterfly/languages/ja.yml","hash":"c978fbf9421af4d96978161cef828ea88ae06037","modified":1739344030959},{"_id":"themes/butterfly/languages/default.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1739344030959},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e91ac1a94e1fc84cd75bc6b0a8b7a62acfb2a516","modified":1739344030960},{"_id":"themes/butterfly/languages/ko.yml","hash":"ca8d31350e60b5849bb609a4d33f90d3dd8905a2","modified":1739344030959},{"_id":"themes/butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1739344030960},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"c3e863ad5b5aa618873ad4370cf0335a9cc67b39","modified":1739344030960},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"9fecee5467e9c5034515fea73f1901c3c67e8ef9","modified":1739344030960},{"_id":"themes/butterfly/layout/category.pug","hash":"bf07d9624ac7285214c7f1d505da3a813c164c8c","modified":1739344030960},{"_id":"themes/butterfly/layout/post.pug","hash":"72f47de2492349c64ef148a519bc4cb90c55ece8","modified":1739344030976},{"_id":"themes/butterfly/layout/index.pug","hash":"6aba5fd01aba75fd38ef2e2c1d406d951b8c5560","modified":1739344030976},{"_id":"themes/butterfly/layout/tag.pug","hash":"98c0084a4c62415775ca9e261e3d4eeb7668f35b","modified":1739344030976},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"df07add8fca55a7a12173af53201d306000fd9e0","modified":1739344030958},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1739344030958},{"_id":"themes/butterfly/package.json","hash":"b0c9ec69583ca996004f33ec393bf10b4bd3c86c","modified":1739344030976},{"_id":"themes/butterfly/scripts/events/404.js","hash":"a196e0d2eb40d1643bcf53a467ad37104f877ca5","modified":1739344030977},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1739344030977},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"0e59424100fc3138b9096b38a0a2384a6411f8d9","modified":1739344030977},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1739344030977},{"_id":"themes/butterfly/layout/page.pug","hash":"baddb5ff69a18e3fc0a144136b16a719eeb6e076","modified":1739344030976},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"7a1329d40caf93b80c5e7e90c01d3db6feb13728","modified":1739344030977},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"1ac9527c510ca757724f15dec84b0ead032411b2","modified":1739344030977},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1739344030977},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1739344030958},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"4393a0e5ee97653496c0a1c273359005583a7eb7","modified":1739344030977},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1739344030958},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"05da5331b442e9b4645b7d9584918b6e8128f086","modified":1739344030978},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"90f65e32a76f43fdd1ffae55775e300f6a3b1c02","modified":1739344030977},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"5edf400514843e28b329c3fd3f12f66ed5faca66","modified":1739344030978},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"1b37a484cbcc81f51953ea093644b70499c26314","modified":1739344030978},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"b69c137c06791db58e347474b88803e112d100dd","modified":1739344030976},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c207f1c02e2976fc0d125946fc1d98cf3d06b6f8","modified":1739344030978},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"7397db8012c27a4a1da75dd659745676654a0c65","modified":1739344030978},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"9c2ee5868879529f7cef7d93edca5b755f45e7e9","modified":1739344030978},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"806e2e5843df23e7eb94709056676f5ce6bfefa7","modified":1739344030978},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"555f7e4a2a7d8c4420ca467e87625bf96db11a70","modified":1739344030978},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"a26402edc63cbe8faa6a99647f039ffd9616e1f6","modified":1739344030978},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"32c6b81c5f668fc72a94de27f71f65edefd773be","modified":1739344030979},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"22bc3a24c3610b5a3c3a2043b7d10e26d00018b8","modified":1739344030979},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"be7c992cb1da26466d5ba676064c81a43338ca6a","modified":1739344030979},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1739344030958},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"448bd8982547616bf5d5e1ddc71816913bbb7d05","modified":1739344030979},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1739344030979},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"132d1e7757d0dac42d6b0957a25484613d7ed873","modified":1739344030978},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"f4507d1527cc0d5fe9fdd89eb769e15814a18fec","modified":1739344030980},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1739344030979},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3a9a28f6833e9cea60761e52ab8990fcb597444f","modified":1739344030980},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"1ce5fcce4d045a20f26821f0c773ce458fdf9769","modified":1739344030979},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"b3807dd492bafe9a148c76adf408da1c6fb47b6b","modified":1739344030980},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"c9ab9bbfc688b87cfc2610ec888e062e06a71415","modified":1739344030960},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"de6546392275195ecb52a1af62c54991ff9719ca","modified":1739344030960},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"5a641907c0390f1b068b7cb3e2e141f4db43892f","modified":1739344030964},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1739344030986},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"393d2720e0887a1a0e68206a6d37205549535dd4","modified":1739344030962},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"78cd51877c72a66de13ad88af6687627d4743b03","modified":1739344030960},{"_id":"themes/butterfly/source/css/var.styl","hash":"1d927577fb5eac0fff7b0ea386b20e70e411d4f1","modified":1739344030986},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"7dbf86c92a81ed79dc9958005fe07094d5d34918","modified":1739344030964},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"c588ea813c09bd12321e3e70bdbe1a21eb40f398","modified":1739344030964},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1739344030987},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1739344030990},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1739344030989},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1739344030990},{"_id":"themes/butterfly/source/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1739344030990},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"11a0fde4e784b0af5bb813c9e9ca9e480e5db99a","modified":1739344030983},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"e2761a2515b34d2d41dea00551abc44d4ce72aeb","modified":1739344030983},{"_id":"themes/butterfly/source/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1739344030991},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1739344030991},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"4765d72ab300910437d64991d3f70a82b41d4e3a","modified":1739344030982},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"643ff8c79d033947da312b70847b1b45850d7b29","modified":1739344030984},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"79e95511d8d51e8944092b9596994d9779c1f4e4","modified":1739344030981},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"855af8f97daad51b0161d96d50abd71edec87142","modified":1739344030984},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"8aa755a3f588e6e598e4fb6510faa6e766d59a94","modified":1739344030984},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"354902d03f13068cf8a3617fb0ea92669e6b2a86","modified":1739344030984},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c08432ecceaa187005c55144cf6f2b092ca50820","modified":1739344030984},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"3312e3bc1076ac8ba9dd902a671602c78a5e1479","modified":1739344030982},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"b02e88bb5dafcef11be4669da6cd9cddbf9a852a","modified":1739344030984},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1739344030982},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"3fa5aa012c62da3b5220654426c0708cab24e9af","modified":1739344030984},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"4382ecffdb778de9fa05edf24765b68ae6da1220","modified":1739344030982},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"1a864887fb1bc9d24caa6b8b63a9bfc251762ffd","modified":1739344030982},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1739344030982},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"559e7cacb6e6911a064637fee0288fdcf0082a4b","modified":1739344030983},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"e765323537d174c7dcb88614100ccdc3e2d020e1","modified":1739344030984},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"be7ee2c63cedbc6b7f03cb3993ec533d9ae9d8bb","modified":1739344030983},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"0ba6e4f5252d1a95e9dfa20b4a17207b6713947d","modified":1739344030983},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"517361bf999e41fdea2c57e0af6e82d310f76edd","modified":1739344030983},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"dbd4af28bbf2fe9a7d75a75fdf460dfb3317311a","modified":1739344030982},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"a96513acd7f51ffa01531ef3a24fdf5391ae93ae","modified":1739344030983},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"743f9dd5585ecac812f3aa908eede4093d84fbd7","modified":1739344030983},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"0d0ef8a9260b494e50ef545e5f395d649418f0a9","modified":1739344030983},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"e2046eed9503ac506d5ca120b60203dd2cd968af","modified":1739344030985},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"44d6b9fa9f0cb9026722f7dda15368d41d3fed20","modified":1739344030984},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1739344030985},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"7e5ca6a899c66b26cebc027db530d54018e2c5c0","modified":1739344030985},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"2c71b5bfb873d57eb6532144f66e86183dd0dcf6","modified":1739344030985},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"f7415acfee7adb5ba01fd278b1e16b636a6b20a1","modified":1739344030985},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1739344030985},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"4a651e47d658340443bb63b7d15a1e9e34f76aca","modified":1739344030985},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"e76655e699154c3d39043c1a5bb8400dc1658399","modified":1739344030986},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"62d03f6c429c2de256a204399610a041cab23b04","modified":1739344030986},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1739344030986},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"1ce084ed240d0e998bcdf1416ada598637878398","modified":1739344030985},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"5ded9ddc66777e93cc4f0e1e4349540c0249346d","modified":1739344030985},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"cf24d72ea16ef253a438efe95b9a0a8fdfbb6d01","modified":1739344030986},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"506bbff9c954d5f92a6d97145be2d732571fae39","modified":1739344030980},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"15f321aee7876f2366677914a7cd2ab8b071b162","modified":1739344030980},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9f04f61fdd0a91874ad84b3963ae4e88bfb2b546","modified":1739344030961},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"111b1300efddf0743d8744822b3858a8dc311ed2","modified":1739344030961},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c97ec4a5225f2236377b2ca3b296031f64c72e44","modified":1739344030960},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"dcfc63e62d3d58e581ad3ad77daa3fb03472d1ab","modified":1739344030960},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"0e301fe266b3260257b5a619dc8eedf2c1955e7e","modified":1739344030961},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"ad56f4bc914b6d6b5ca481dd95988043abb29914","modified":1739344030961},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"95316827e12ec1a2cee18b7d5f49971e9a88b138","modified":1739344030962},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"cbe55f1c3c33828f0b3a8812829c19ee50399ce6","modified":1739344030962},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1739344030961},{"_id":"themes/butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1739344030961},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"605809f97b2f0da0e2e84dd2365fc8ccee1de6bd","modified":1739344030962},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1739344030961},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"dbc2643d8b01de535ac498badefd5152bcd9c2d7","modified":1739344030962},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"c67609f1c04c8b7b966f838f265feaf7ba9a2883","modified":1739344030963},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"10aa44e0216dbde863e2bd41267b613dc220e517","modified":1739344030963},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"8b12fa52bd522dded8b7f1ae3f580f339d75aecf","modified":1739344030963},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"b7608dca3d361001d661779fe8be03c370231c41","modified":1739344030962},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"55090eee8076af761be7741b4e330ceea07c27d7","modified":1739344030962},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"ca9cc03a51561413728d7211f0a544654c5d4e36","modified":1739344030963},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"2bef558fa87986805b3397319b4c088564ba7c44","modified":1739344030964},{"_id":"themes/butterfly/layout/includes/post/outdate-notice.pug","hash":"1661f8a53334789099efffa92246158cb3d933b3","modified":1739344030964},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"2dca79799c566ffa68b21ecefa9c63432b5088e1","modified":1739344030964},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1739344030963},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"38b85f46c8e1bcbc43d2a4875d94ea201518eeeb","modified":1739344030963},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"4912beecdef7af33f0704ef4d6605e1ac69fbb11","modified":1739344030963},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"0595d60dbf701e2ffa92181923861b1457a02112","modified":1739344030965},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"98f004c78c99d92d526b1f61c29c6e84ec3d7a34","modified":1739344030964},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"7e7cd9dfd832c8f3e829ad445eccf5cb5dc8ff18","modified":1739344030964},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"38c0781ac7544d2010d5bfe7ae521125f3672975","modified":1739344030964},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"5c7605a0353ef2709f75bad27794f985c7c78907","modified":1739344030972},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"512111475060798925eb1a7bc7617c34b8bd32ab","modified":1739344030972},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"21d42f43f26a2075abf2e6d13d35fb1aaf53a8b4","modified":1739344030974},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1739344030969},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1739344030975},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1739344030975},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"0d257d38cb150b9b2696aa2d058e9d277cfdf3d7","modified":1739344030974},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"5012e9cca9c1ce8c379d407f4ff426e297fd1ffe","modified":1739344030975},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1739344030975},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1739344030975},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1739344030975},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"ff38e96f336a6c85ecb0ef015973980a11fc83f5","modified":1739344030975},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1739344030975},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"ba95646b78688bcdcf77166407c4799e5e3c3e6d","modified":1739344030975},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1739344030975},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1739344030975},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"3727d13b339134e037f30f5d7e9af9ec243f0ff1","modified":1739344030976},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"e4eb905a53da498d5b036d4ab78a486a3cc77aa3","modified":1739344030976},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1739344030976},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1739344030990},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1739344030991},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"fdcc5a88505fcbf0593aa04ecb4ac0c8ad4f8fa3","modified":1739344030981},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"ed77729c26cf815c75efd3a6889b6ac805471765","modified":1739344030981},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"cc272f7d612a52f4f1d2a95456cc89bc709fe0e5","modified":1739344030981},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"97e81321fe7991831bb5cd189402af477a0e5a73","modified":1739344030965},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1997713a8722391c8b5c8c1598ec19adee993fa5","modified":1739344030981},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"cb77a73a2b47156d18afb9f2376b3d502d0d12d7","modified":1739344030965},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1739344030965},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1739344030965},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"007bb96fd84f38852b7ab5f761e6867b6058422f","modified":1739344030966},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":1739344030965},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"a35c21e9ec2bef465c945408da515bfb5d848d6d","modified":1739344030965},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"5715fc2dc75808af0a434fe66b81d0f651d03ed3","modified":1739344030966},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1739344030966},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"5aaef147ae31e1ffc49152acd43dabc5f15b39ba","modified":1739344030966},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd0af44547211520c10953f3023e22a26025aaf9","modified":1739344030966},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5ba53d5c671c723754c2d0133016005b2af789a9","modified":1739344030966},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"dc02a84f6e0ab3d86f410c6ba7cb6f7b277eb1a4","modified":1739344030966},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"ce9f21e5d599733089a91d655ea980970b87456d","modified":1739344030966},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"5320f74b711aa2732ee0a506da08abef41c0c5ac","modified":1739344030966},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"9b0df2082ac11ad85471ff70e79c03b58c916677","modified":1739344030967},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"67b67c46734eb82141ee1c827b8a71fea0945b2c","modified":1739344030967},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2cf6ce7a703197f0d8991f3416cbc47b7250734a","modified":1739344030967},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1739344030968},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1739344030968},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"817902fe7f3c42d6fca1253afd83583ec4b9f90c","modified":1739344030967},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"566848e4f7b857af7cd01fc72952b49101955d0a","modified":1739344030968},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"3fdb4d12fa7440466720b24d19b12b06f53d35e1","modified":1739344030968},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"dcd3af96d8be1a6358a88daf2c66165cc9b792d9","modified":1739344030981},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"0dc016c759b3b90449b1076307c390fcba6052f6","modified":1739344030968},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b17416a1a76c58651757d9b80e4f6715de636342","modified":1739344030969},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"b99a94de9a6bda59d6977b3b693d0e369123d727","modified":1739344030969},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"1c2190c9bac26992de8d52be4f8522309d566750","modified":1739344030970},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"5c97558d4d9109b5f9aff5bef5665cfbe3938c50","modified":1739344030969},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"5fc8f74c6a04f0c219a52c9768c5f19119b80ef7","modified":1739344030970},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b771c0de03a70d4fc2d98bb3e2ebc069033ff5eb","modified":1739344030970},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"516dae8e5dad4ace61333cb4df8ae70a8a9acbec","modified":1739344030970},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1739344030965},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"9e1fd1f5703e133682dea92a0c91cf7058207868","modified":1739344030970},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"2e82651607326e7f999fc7891480c74a06cbb416","modified":1739344030970},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"2af8902b0e8c336633ce3ee444a44b23028bacee","modified":1739344030971},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"f40e18bdf470f76ff7063cf42016c58d75d06c24","modified":1739344030971},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"39b620c7b2cf5f4527df547b1777fbcb7508a525","modified":1739344030971},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"e7e05cc32322f381077624599adc2e64486310a8","modified":1739344030971},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"154ec9bcce19bc3a90771d8d55aff5ae14b5bee2","modified":1739344030971},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"366273efa0d6fc7386e4acafa32ea92d7efe4464","modified":1739344030970},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"88aef4170336282bc988ab64c9b5ec8f5272a62c","modified":1739344030972},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"11a4e7decb634fbd6af454aa5ec230945837b6a9","modified":1739344030974},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"e90902290515310480e376d6ea74c0be82fc03d8","modified":1739344030973},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"f11c6db285f57a475db638e74920efb2d0e5a4d0","modified":1739344030974},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"fc1f9d0655a94bfc76e5542207d1991e5d24690a","modified":1739344030972},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"18b492731f67d449bb32d7fac321deb57a92e75f","modified":1739344030973},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1739344030974},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"8a7d5cdca6a87897d435fc88ebcb7ec0b7ec8591","modified":1739344030974},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"393c94702fd65c585e37bcf9a4f33c638d8bac72","modified":1739344030974},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1739344030989},{"_id":"public/post-sitemap.xml","hash":"1fe9df3768e0953912002a58a8bd0dcb1ab63cde","modified":1739352124783},{"_id":"public/tag-sitemap.xml","hash":"e65abce5ff5d8687a4d98e55c46515a62aeb9ace","modified":1739352124783},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1739352124783},{"_id":"public/sitemap.xml","hash":"7e1a1b8bb70c94ba3e1490f56e80d21e492ba8cb","modified":1739352124783},{"_id":"public/archives/index.html","hash":"1bbdec07b44824e8ed0001d9b3c7a284ed015dfc","modified":1739352124783},{"_id":"public/archives/2025/index.html","hash":"1b18cadcaf8b16220782891c14b882bb4a219ae7","modified":1739352124783},{"_id":"public/archives/2025/02/index.html","hash":"0b0c03fae54688baa9574301b478c65cb609fa61","modified":1739352124783},{"_id":"public/index.html","hash":"b687a9b5bc4a3a5104cf1c44f3a783df76ca0ac4","modified":1739352124783},{"_id":"public/tags/java/index.html","hash":"5ae177fea4b74b360b3a639421ddc7874f7ffb9d","modified":1739352124783},{"_id":"public/tags/Spring/index.html","hash":"5dd5e4f3ce8f6313c39fd41abf5e328947f595e0","modified":1739352124783},{"_id":"public/tags/SpringBoot/index.html","hash":"d96eba7548a242bb9c1de2c18314035b27889c56","modified":1739352124783},{"_id":"public/2025/02/11/fast-springboot-demo/index.html","hash":"a6860dbf92af81697df4ebebd2b535cb4588f35b","modified":1739352124783},{"_id":"public/README.md","hash":"5f08f51e8f6706eee873233403d687ce6cbb91c4","modified":1739352124783},{"_id":"public/favicon.ico","hash":"1ebda60743b8c63a4ef7ffbbf530c5ab5bf8c628","modified":1739352124783},{"_id":"public/images/favicon.ico","hash":"1ebda60743b8c63a4ef7ffbbf530c5ab5bf8c628","modified":1739352124783},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1739352124783},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1739352124783},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1739352124783},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1739352124783},{"_id":"public/images/image-20250211094135244.png","hash":"5f9f85818c8b97075fb9e756207b8891c55cf818","modified":1739352124783},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1739352124783},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1739352124783},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1739352124783},{"_id":"public/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1739352124783},{"_id":"public/css/index.css","hash":"0f36fb1deaa47f95e5d5c25e86be88bb1aba90e8","modified":1739352124783},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1739352124783},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1739352124783},{"_id":"public/images/header.jpg","hash":"4f7f1160a56db2b22357b17a68ac913b2f949874","modified":1739352124783},{"_id":"public/favicon.jpg","hash":"4f7f1160a56db2b22357b17a68ac913b2f949874","modified":1739352124783},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1739352124783}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"单体springboot小应用基础配置项","date":"2025-02-11T02:00:00.000Z","_content":"\n# 快速搭建 springboot 单体应用的步骤\n\n## 第一步：创建一个简单的项目\n\n1. 使用 idea 创建，并选择相关的依赖，这里只引入了最简单的部分\n\n   <img src=\"/images/image-20250211094135244.png\" alt=\"image-20250211094135244\" style=\"zoom: 50%;\" />\n\n2. 编写一个简单的接口，验证项目是否创建成功\n\n   ```java\n   @RestController\n   @RequestMapping(\"/\")\n   public class HomeController {\n\n       @GetMapping\n       public String helloWorld() {\n           return \"Hello World!\";\n       }\n   }\n   ```\n\n## 第二步：创建拦截器和过滤器做一些想要的动作\n\n这里以 token 校验和请求日志打印为例\n\n```java\n//过滤器\npublic class BaseFilter implements Filter {\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n      \t//需要将默认的request对象转为可重复读取的对象\n        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;\n        ContentCachingRequestWrapper wrappedRequest = new ContentCachingRequestWrapper(httpServletRequest);\n        filterChain.doFilter(wrappedRequest, servletResponse);\n    }\n}\n//拦截器\npublic class BaseInterceptor implements HandlerInterceptor {\n\n    Logger log = LoggerFactory.getLogger(BaseInterceptor.class);\n    private static final String REQ_BEGIN = \"req_begin\";\n    private static final String TOKEN_KEY = \"Authorization\";\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {\n        log.info(\"请求开始：{}\", request.getRequestURI());\n        request.setAttribute(REQ_BEGIN, System.currentTimeMillis());\n        //自定义token校验，存入上下文中\n        String token = request.getHeader(TOKEN_KEY);\n        return true;\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)\n            throws Exception {\n        // 在请求处理完成后读取请求体\n        if (request instanceof ContentCachingRequestWrapper) {\n            ContentCachingRequestWrapper requestWrapper = (ContentCachingRequestWrapper) request;\n            String requestBody = new String(requestWrapper.getContentAsByteArray(),\n                    requestWrapper.getCharacterEncoding());\n            log.info(\"请求体内容: {}\", requestBody);\n        }\n\n        // 计算请求耗时\n        Long reqBegin = (Long) request.getAttribute(REQ_BEGIN);\n        long reqEnd = System.currentTimeMillis();\n        log.info(\"请求结束，耗时：{} ms\", reqEnd - reqBegin);\n        HandlerInterceptor.super.afterCompletion(request, response, handler, ex);\n    }\n}\n//配置到spring容器中\n@Configuration\npublic class SpringWebConfig implements WebMvcConfigurer {\n\n  \t//注册过滤器\n    @Bean\n    public FilterRegistrationBean<BaseFilter> cachingRequestBodyFilter() {\n        FilterRegistrationBean<BaseFilter> registrationBean = new FilterRegistrationBean<>();\n        registrationBean.setFilter(new BaseFilter());\n        registrationBean.addUrlPatterns(\"/*\"); // 根据需要设置过滤的 URL 模式\n        return registrationBean;\n    }\n\t\t//注册拦截器\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new BaseInterceptor());\n    }\n}\n\n```\n\n## 第三步：统一返回格式和异常处理\n\n```java\n//统一返回数据结构\n@Data\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class Result<T> {\n    private String message;\n    private Integer code;\n    private T data;\n\n    public static <T> Result<T> ok(T data) {\n        return new Result<>(\"success\", 0, data);\n    }\n\n    public static <T> Result<T> failed(String message) {\n        return new Result<>(message, 1001, null);\n    }\n\n    public Result(String message, Integer code, T data) {\n        this.message = message;\n        this.code = code;\n        this.data = data;\n    }\n}\n//通过result返回数据，以及统一异常\n@ControllerAdvice\npublic class GlobalResponse implements ResponseBodyAdvice<Object> {\n    private final ObjectMapper objectMapper = new ObjectMapper();\n\n    @Override\n    public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {\n        // 处理所有的结果\n        return true;\n    }\n\n    @Override\n    public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType,\n                                  Class<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request,\n                                  ServerHttpResponse response) {\n        if (body instanceof String) {\n            try {\n                return objectMapper.writeValueAsString(Result.ok(body));\n            } catch (Exception e) {\n                return Result.failed(\"序列化异常\");\n            }\n        }\n        // 返回结果使用Result进行包装\n        if (body instanceof Result) {\n            return body;\n        }\n        return Result.ok(body);\n    }\n\n    @ExceptionHandler(RuntimeException.class)\n    @ResponseBody\n    public final Result<String> handleUnknownExceptions(RuntimeException e) {\n        // 异常报错使用Result进行包装\n        return Result.failed(e.getMessage());\n    }\n}\n\n```\n\n## 附：测试代码\n\n```java\n@Slf4j\n@RestController\n@RequestMapping\npublic class HomeController {\n    @GetMapping(\"/str\")\n    public String helloWorld() {\n        return \"Hello World!\";\n    }\n\n    @PostMapping(\"/req\")\n    public HelloReq postHelloWorld(@RequestBody HelloReq helloReq) {\n        log.info(\"收到请求：{}\", helloReq.toString());\n        HelloReq changeGender = new HelloReq();\n        changeGender.setUsername(helloReq.getUsername());\n        changeGender.setUserGender(\"女\");\n        changeGender.setUserAge(helloReq.getUserAge());\n        return changeGender;\n    }\n\n    @PostMapping(\"/ex\")\n    public void deleteHelloWorld() {\n        throw new RuntimeException(\"模拟异常\");\n    }\n\n    @Data\n    public static class HelloReq {\n        private String username;\n        private String userGender;\n        private Integer userAge;\n    }\n}\n```\n","source":"_posts/fast-springboot-demo.md","raw":"---\ntitle: 单体springboot小应用基础配置项\ndate: 2025-02-11 10:00:00\ntags: [java, Spring, SpringBoot]\n---\n\n# 快速搭建 springboot 单体应用的步骤\n\n## 第一步：创建一个简单的项目\n\n1. 使用 idea 创建，并选择相关的依赖，这里只引入了最简单的部分\n\n   <img src=\"/images/image-20250211094135244.png\" alt=\"image-20250211094135244\" style=\"zoom: 50%;\" />\n\n2. 编写一个简单的接口，验证项目是否创建成功\n\n   ```java\n   @RestController\n   @RequestMapping(\"/\")\n   public class HomeController {\n\n       @GetMapping\n       public String helloWorld() {\n           return \"Hello World!\";\n       }\n   }\n   ```\n\n## 第二步：创建拦截器和过滤器做一些想要的动作\n\n这里以 token 校验和请求日志打印为例\n\n```java\n//过滤器\npublic class BaseFilter implements Filter {\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n      \t//需要将默认的request对象转为可重复读取的对象\n        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;\n        ContentCachingRequestWrapper wrappedRequest = new ContentCachingRequestWrapper(httpServletRequest);\n        filterChain.doFilter(wrappedRequest, servletResponse);\n    }\n}\n//拦截器\npublic class BaseInterceptor implements HandlerInterceptor {\n\n    Logger log = LoggerFactory.getLogger(BaseInterceptor.class);\n    private static final String REQ_BEGIN = \"req_begin\";\n    private static final String TOKEN_KEY = \"Authorization\";\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {\n        log.info(\"请求开始：{}\", request.getRequestURI());\n        request.setAttribute(REQ_BEGIN, System.currentTimeMillis());\n        //自定义token校验，存入上下文中\n        String token = request.getHeader(TOKEN_KEY);\n        return true;\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)\n            throws Exception {\n        // 在请求处理完成后读取请求体\n        if (request instanceof ContentCachingRequestWrapper) {\n            ContentCachingRequestWrapper requestWrapper = (ContentCachingRequestWrapper) request;\n            String requestBody = new String(requestWrapper.getContentAsByteArray(),\n                    requestWrapper.getCharacterEncoding());\n            log.info(\"请求体内容: {}\", requestBody);\n        }\n\n        // 计算请求耗时\n        Long reqBegin = (Long) request.getAttribute(REQ_BEGIN);\n        long reqEnd = System.currentTimeMillis();\n        log.info(\"请求结束，耗时：{} ms\", reqEnd - reqBegin);\n        HandlerInterceptor.super.afterCompletion(request, response, handler, ex);\n    }\n}\n//配置到spring容器中\n@Configuration\npublic class SpringWebConfig implements WebMvcConfigurer {\n\n  \t//注册过滤器\n    @Bean\n    public FilterRegistrationBean<BaseFilter> cachingRequestBodyFilter() {\n        FilterRegistrationBean<BaseFilter> registrationBean = new FilterRegistrationBean<>();\n        registrationBean.setFilter(new BaseFilter());\n        registrationBean.addUrlPatterns(\"/*\"); // 根据需要设置过滤的 URL 模式\n        return registrationBean;\n    }\n\t\t//注册拦截器\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new BaseInterceptor());\n    }\n}\n\n```\n\n## 第三步：统一返回格式和异常处理\n\n```java\n//统一返回数据结构\n@Data\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class Result<T> {\n    private String message;\n    private Integer code;\n    private T data;\n\n    public static <T> Result<T> ok(T data) {\n        return new Result<>(\"success\", 0, data);\n    }\n\n    public static <T> Result<T> failed(String message) {\n        return new Result<>(message, 1001, null);\n    }\n\n    public Result(String message, Integer code, T data) {\n        this.message = message;\n        this.code = code;\n        this.data = data;\n    }\n}\n//通过result返回数据，以及统一异常\n@ControllerAdvice\npublic class GlobalResponse implements ResponseBodyAdvice<Object> {\n    private final ObjectMapper objectMapper = new ObjectMapper();\n\n    @Override\n    public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {\n        // 处理所有的结果\n        return true;\n    }\n\n    @Override\n    public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType,\n                                  Class<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request,\n                                  ServerHttpResponse response) {\n        if (body instanceof String) {\n            try {\n                return objectMapper.writeValueAsString(Result.ok(body));\n            } catch (Exception e) {\n                return Result.failed(\"序列化异常\");\n            }\n        }\n        // 返回结果使用Result进行包装\n        if (body instanceof Result) {\n            return body;\n        }\n        return Result.ok(body);\n    }\n\n    @ExceptionHandler(RuntimeException.class)\n    @ResponseBody\n    public final Result<String> handleUnknownExceptions(RuntimeException e) {\n        // 异常报错使用Result进行包装\n        return Result.failed(e.getMessage());\n    }\n}\n\n```\n\n## 附：测试代码\n\n```java\n@Slf4j\n@RestController\n@RequestMapping\npublic class HomeController {\n    @GetMapping(\"/str\")\n    public String helloWorld() {\n        return \"Hello World!\";\n    }\n\n    @PostMapping(\"/req\")\n    public HelloReq postHelloWorld(@RequestBody HelloReq helloReq) {\n        log.info(\"收到请求：{}\", helloReq.toString());\n        HelloReq changeGender = new HelloReq();\n        changeGender.setUsername(helloReq.getUsername());\n        changeGender.setUserGender(\"女\");\n        changeGender.setUserAge(helloReq.getUserAge());\n        return changeGender;\n    }\n\n    @PostMapping(\"/ex\")\n    public void deleteHelloWorld() {\n        throw new RuntimeException(\"模拟异常\");\n    }\n\n    @Data\n    public static class HelloReq {\n        private String username;\n        private String userGender;\n        private Integer userAge;\n    }\n}\n```\n","slug":"fast-springboot-demo","published":1,"updated":"2025-02-12T08:54:54.027Z","comments":1,"layout":"post","photos":[],"_id":"cm71pch3r0000y5o2ennogwkm","content":"<h1 id=\"快速搭建-springboot-单体应用的步骤\"><a href=\"#快速搭建-springboot-单体应用的步骤\" class=\"headerlink\" title=\"快速搭建 springboot 单体应用的步骤\"></a>快速搭建 springboot 单体应用的步骤</h1><h2 id=\"第一步：创建一个简单的项目\"><a href=\"#第一步：创建一个简单的项目\" class=\"headerlink\" title=\"第一步：创建一个简单的项目\"></a>第一步：创建一个简单的项目</h2><ol>\n<li><p>使用 idea 创建，并选择相关的依赖，这里只引入了最简单的部分</p>\n<img src=\"/images/image-20250211094135244.png\" alt=\"image-20250211094135244\" style=\"zoom: 50%;\">\n</li>\n<li><p>编写一个简单的接口，验证项目是否创建成功</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HomeController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">helloWorld</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello World!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"第二步：创建拦截器和过滤器做一些想要的动作\"><a href=\"#第二步：创建拦截器和过滤器做一些想要的动作\" class=\"headerlink\" title=\"第二步：创建拦截器和过滤器做一些想要的动作\"></a>第二步：创建拦截器和过滤器做一些想要的动作</h2><p>这里以 token 校验和请求日志打印为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//过滤器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">      \t<span class=\"comment\">//需要将默认的request对象转为可重复读取的对象</span></span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">httpServletRequest</span> <span class=\"operator\">=</span> (HttpServletRequest) servletRequest;</span><br><span class=\"line\">        <span class=\"type\">ContentCachingRequestWrapper</span> <span class=\"variable\">wrappedRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ContentCachingRequestWrapper</span>(httpServletRequest);</span><br><span class=\"line\">        filterChain.doFilter(wrappedRequest, servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//拦截器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Logger</span> <span class=\"variable\">log</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(BaseInterceptor.class);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">REQ_BEGIN</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;req_begin&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TOKEN_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Authorization&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;请求开始：&#123;&#125;&quot;</span>, request.getRequestURI());</span><br><span class=\"line\">        request.setAttribute(REQ_BEGIN, System.currentTimeMillis());</span><br><span class=\"line\">        <span class=\"comment\">//自定义token校验，存入上下文中</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> request.getHeader(TOKEN_KEY);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在请求处理完成后读取请求体</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request <span class=\"keyword\">instanceof</span> ContentCachingRequestWrapper) &#123;</span><br><span class=\"line\">            <span class=\"type\">ContentCachingRequestWrapper</span> <span class=\"variable\">requestWrapper</span> <span class=\"operator\">=</span> (ContentCachingRequestWrapper) request;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">requestBody</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(requestWrapper.getContentAsByteArray(),</span><br><span class=\"line\">                    requestWrapper.getCharacterEncoding());</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;请求体内容: &#123;&#125;&quot;</span>, requestBody);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算请求耗时</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">reqBegin</span> <span class=\"operator\">=</span> (Long) request.getAttribute(REQ_BEGIN);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">reqEnd</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;请求结束，耗时：&#123;&#125; ms&quot;</span>, reqEnd - reqBegin);</span><br><span class=\"line\">        HandlerInterceptor.<span class=\"built_in\">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//配置到spring容器中</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringWebConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t<span class=\"comment\">//注册过滤器</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean&lt;BaseFilter&gt; <span class=\"title function_\">cachingRequestBodyFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        FilterRegistrationBean&lt;BaseFilter&gt; registrationBean = <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class=\"line\">        registrationBean.setFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">BaseFilter</span>());</span><br><span class=\"line\">        registrationBean.addUrlPatterns(<span class=\"string\">&quot;/*&quot;</span>); <span class=\"comment\">// 根据需要设置过滤的 URL 模式</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//注册拦截器</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">BaseInterceptor</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三步：统一返回格式和异常处理\"><a href=\"#第三步：统一返回格式和异常处理\" class=\"headerlink\" title=\"第三步：统一返回格式和异常处理\"></a>第三步：统一返回格式和异常处理</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//统一返回数据结构</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Result</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Result&lt;T&gt; <span class=\"title function_\">ok</span><span class=\"params\">(T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Result</span>&lt;&gt;(<span class=\"string\">&quot;success&quot;</span>, <span class=\"number\">0</span>, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Result&lt;T&gt; <span class=\"title function_\">failed</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Result</span>&lt;&gt;(message, <span class=\"number\">1001</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Result</span><span class=\"params\">(String message, Integer code, T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//通过result返回数据，以及统一异常</span></span><br><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalResponse</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ResponseBodyAdvice</span>&lt;Object&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supports</span><span class=\"params\">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理所有的结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">beforeBodyWrite</span><span class=\"params\">(Object body, MethodParameter returnType, MediaType selectedContentType,</span></span><br><span class=\"line\"><span class=\"params\">                                  Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType, ServerHttpRequest request,</span></span><br><span class=\"line\"><span class=\"params\">                                  ServerHttpResponse response)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> objectMapper.writeValueAsString(Result.ok(body));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Result.failed(<span class=\"string\">&quot;序列化异常&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回结果使用Result进行包装</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body <span class=\"keyword\">instanceof</span> Result) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.ok(body);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(RuntimeException.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Result&lt;String&gt; <span class=\"title function_\">handleUnknownExceptions</span><span class=\"params\">(RuntimeException e)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异常报错使用Result进行包装</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.failed(e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"附：测试代码\"><a href=\"#附：测试代码\" class=\"headerlink\" title=\"附：测试代码\"></a>附：测试代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HomeController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/str&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">helloWorld</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello World!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/req&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HelloReq <span class=\"title function_\">postHelloWorld</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> HelloReq helloReq)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;收到请求：&#123;&#125;&quot;</span>, helloReq.toString());</span><br><span class=\"line\">        <span class=\"type\">HelloReq</span> <span class=\"variable\">changeGender</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelloReq</span>();</span><br><span class=\"line\">        changeGender.setUsername(helloReq.getUsername());</span><br><span class=\"line\">        changeGender.setUserGender(<span class=\"string\">&quot;女&quot;</span>);</span><br><span class=\"line\">        changeGender.setUserAge(helloReq.getUserAge());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> changeGender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/ex&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteHelloWorld</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;模拟异常&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloReq</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String userGender;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Integer userAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"快速搭建-springboot-单体应用的步骤\"><a href=\"#快速搭建-springboot-单体应用的步骤\" class=\"headerlink\" title=\"快速搭建 springboot 单体应用的步骤\"></a>快速搭建 springboot 单体应用的步骤</h1><h2 id=\"第一步：创建一个简单的项目\"><a href=\"#第一步：创建一个简单的项目\" class=\"headerlink\" title=\"第一步：创建一个简单的项目\"></a>第一步：创建一个简单的项目</h2><ol>\n<li><p>使用 idea 创建，并选择相关的依赖，这里只引入了最简单的部分</p>\n<img src=\"/images/image-20250211094135244.png\" alt=\"image-20250211094135244\" style=\"zoom: 50%;\">\n</li>\n<li><p>编写一个简单的接口，验证项目是否创建成功</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HomeController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">helloWorld</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello World!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"第二步：创建拦截器和过滤器做一些想要的动作\"><a href=\"#第二步：创建拦截器和过滤器做一些想要的动作\" class=\"headerlink\" title=\"第二步：创建拦截器和过滤器做一些想要的动作\"></a>第二步：创建拦截器和过滤器做一些想要的动作</h2><p>这里以 token 校验和请求日志打印为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//过滤器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">      \t<span class=\"comment\">//需要将默认的request对象转为可重复读取的对象</span></span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">httpServletRequest</span> <span class=\"operator\">=</span> (HttpServletRequest) servletRequest;</span><br><span class=\"line\">        <span class=\"type\">ContentCachingRequestWrapper</span> <span class=\"variable\">wrappedRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ContentCachingRequestWrapper</span>(httpServletRequest);</span><br><span class=\"line\">        filterChain.doFilter(wrappedRequest, servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//拦截器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Logger</span> <span class=\"variable\">log</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(BaseInterceptor.class);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">REQ_BEGIN</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;req_begin&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TOKEN_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Authorization&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;请求开始：&#123;&#125;&quot;</span>, request.getRequestURI());</span><br><span class=\"line\">        request.setAttribute(REQ_BEGIN, System.currentTimeMillis());</span><br><span class=\"line\">        <span class=\"comment\">//自定义token校验，存入上下文中</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> request.getHeader(TOKEN_KEY);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在请求处理完成后读取请求体</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request <span class=\"keyword\">instanceof</span> ContentCachingRequestWrapper) &#123;</span><br><span class=\"line\">            <span class=\"type\">ContentCachingRequestWrapper</span> <span class=\"variable\">requestWrapper</span> <span class=\"operator\">=</span> (ContentCachingRequestWrapper) request;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">requestBody</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(requestWrapper.getContentAsByteArray(),</span><br><span class=\"line\">                    requestWrapper.getCharacterEncoding());</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;请求体内容: &#123;&#125;&quot;</span>, requestBody);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算请求耗时</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">reqBegin</span> <span class=\"operator\">=</span> (Long) request.getAttribute(REQ_BEGIN);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">reqEnd</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;请求结束，耗时：&#123;&#125; ms&quot;</span>, reqEnd - reqBegin);</span><br><span class=\"line\">        HandlerInterceptor.<span class=\"built_in\">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//配置到spring容器中</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringWebConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t<span class=\"comment\">//注册过滤器</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean&lt;BaseFilter&gt; <span class=\"title function_\">cachingRequestBodyFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        FilterRegistrationBean&lt;BaseFilter&gt; registrationBean = <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class=\"line\">        registrationBean.setFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">BaseFilter</span>());</span><br><span class=\"line\">        registrationBean.addUrlPatterns(<span class=\"string\">&quot;/*&quot;</span>); <span class=\"comment\">// 根据需要设置过滤的 URL 模式</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//注册拦截器</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">BaseInterceptor</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三步：统一返回格式和异常处理\"><a href=\"#第三步：统一返回格式和异常处理\" class=\"headerlink\" title=\"第三步：统一返回格式和异常处理\"></a>第三步：统一返回格式和异常处理</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//统一返回数据结构</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Result</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Result&lt;T&gt; <span class=\"title function_\">ok</span><span class=\"params\">(T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Result</span>&lt;&gt;(<span class=\"string\">&quot;success&quot;</span>, <span class=\"number\">0</span>, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Result&lt;T&gt; <span class=\"title function_\">failed</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Result</span>&lt;&gt;(message, <span class=\"number\">1001</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Result</span><span class=\"params\">(String message, Integer code, T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//通过result返回数据，以及统一异常</span></span><br><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalResponse</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ResponseBodyAdvice</span>&lt;Object&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supports</span><span class=\"params\">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理所有的结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">beforeBodyWrite</span><span class=\"params\">(Object body, MethodParameter returnType, MediaType selectedContentType,</span></span><br><span class=\"line\"><span class=\"params\">                                  Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType, ServerHttpRequest request,</span></span><br><span class=\"line\"><span class=\"params\">                                  ServerHttpResponse response)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> objectMapper.writeValueAsString(Result.ok(body));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Result.failed(<span class=\"string\">&quot;序列化异常&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回结果使用Result进行包装</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body <span class=\"keyword\">instanceof</span> Result) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.ok(body);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(RuntimeException.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Result&lt;String&gt; <span class=\"title function_\">handleUnknownExceptions</span><span class=\"params\">(RuntimeException e)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异常报错使用Result进行包装</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.failed(e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"附：测试代码\"><a href=\"#附：测试代码\" class=\"headerlink\" title=\"附：测试代码\"></a>附：测试代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HomeController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/str&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">helloWorld</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello World!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/req&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HelloReq <span class=\"title function_\">postHelloWorld</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> HelloReq helloReq)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;收到请求：&#123;&#125;&quot;</span>, helloReq.toString());</span><br><span class=\"line\">        <span class=\"type\">HelloReq</span> <span class=\"variable\">changeGender</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelloReq</span>();</span><br><span class=\"line\">        changeGender.setUsername(helloReq.getUsername());</span><br><span class=\"line\">        changeGender.setUserGender(<span class=\"string\">&quot;女&quot;</span>);</span><br><span class=\"line\">        changeGender.setUserAge(helloReq.getUserAge());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> changeGender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/ex&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteHelloWorld</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;模拟异常&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloReq</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String userGender;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Integer userAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm71pch3r0000y5o2ennogwkm","tag_id":"cm71pch3v0001y5o2dicicj6j","_id":"cm71pch3w0004y5o27vjb87h2"},{"post_id":"cm71pch3r0000y5o2ennogwkm","tag_id":"cm71pch3w0002y5o2ckuj06cc","_id":"cm71pch3w0005y5o2dzke5jte"},{"post_id":"cm71pch3r0000y5o2ennogwkm","tag_id":"cm71pch3w0003y5o2c4u7b5rt","_id":"cm71pch3w0006y5o2412jfr0n"}],"Tag":[{"name":"java","_id":"cm71pch3v0001y5o2dicicj6j"},{"name":"Spring","_id":"cm71pch3w0002y5o2ckuj06cc"},{"name":"SpringBoot","_id":"cm71pch3w0003y5o2c4u7b5rt"}]}}